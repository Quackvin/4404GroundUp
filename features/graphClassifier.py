import json
import matplotlib.pyplot as plt

def graphClassifier(doSave, saveName, strIn):
	clsfr = json.loads(strIn, strict=False)

	rules = clsfr['rules']
	means = rules['centres'][0::2]
	stds = rules['centres'][1::2]
	meanRs = rules['ranges'][0::2]
	stdRs = rules['ranges'][1::2]

	print(rules['centres'])
	print(rules['ranges'])
	print(means)
	print(meanRs)
	print(stds)
	print(stdRs)

	x = range(len(means))

	means = [0 if i=='#' else i for i in means]
	stds = [0 if i == '#' else i for i in stds]
	meanRs = [0 if i == '#' else i for i in meanRs]
	stdRs = [0 if i == '#' else i for i in stdRs]

	plt.title(clsfr['outcome'] + ' Classifier Means')
	plt.errorbar(x,means, yerr=meanRs, fmt='o', capsize=2)
	plt.show()
	if(doSave):
		plt.savefig(saveName + 'Means.png')

	plt.clf()
	plt.title(clsfr['outcome'] + ' Classifier Stds')
	plt.errorbar(x,stds, yerr=stdRs, fmt='o', capsize=2)
	plt.show()
	if(doSave):
		plt.savefig(saveName + 'Stds.png')

# graphClassifier(bool doSave, str saveFilePrefix, str dictAsString)
graphClassifier(True, 'classifierPlot','{"matchCount": 1, "correctCount": 1, "accuracy": 1.0, "fitness": 1.0, "numerosity": 1, "lastGAIteration": 4, "birthIteration": 4, "aveMatchSetSize": 0.0, "rules": {"centres": [-2.85988006836, 0.312345499844, -3.87580715507, 0.267095651582, "#", 0.299272103757, -4.98854314917, 0.301002914082, -5.23345665282, 0.305263269685, -5.36245107841, 0.324923327621, "#", 0.313789225883, -5.49836865496, 0.33022669452, -5.4621281505, 0.320046406914, -5.32655268269, 0.314891257705, -5.27965731843, 0.303806529991, -5.35458108675, 0.299732257456, -5.48517614775, 0.263582600189, -5.66182239436, 0.254074619009, -5.80334263698, 0.229306537742, -5.97008455927, 0.215085497983, -6.14644656555, 0.201203015175, -6.35412041154, 0.207137699099, -6.65475173198, 0.203165286803, -6.85824363766, "#", -6.95068004509, 0.206237114452, -6.97283932611, 0.238717859211, "#", 0.27703426802, -6.91409329029, 0.326398275867, -6.89263895652, 0.383850888602, -6.91717625744, 0.403966114462, "#", 0.405792201342, "#", 0.382830876516, -7.97039919843, 0.329618811989, -8.64369254433, "#", -9.14397484563, 0.188809129207, -8.99217065423, 0.268733956708, -9.04972566355, 0.276974419243, -9.30997582727, 0.222956231705, -9.44506816196, 0.212803097551, -9.63183756926, 0.181518932471, -9.87706220672, 0.165683227408, -10.1215088849, 0.155700858013, -10.3456115386, "#", -10.6993621795, 0.209462506965], "ranges": [1.42994003418, 0.156172749922, 1.937903577535, 0.133547825791, "#", 0.1496360518785, 2.494271574585, 0.150501457041, 2.61672832641, 0.1526316348425, 2.681225539205, 0.1624616638105, "#", 0.1568946129415, 2.74918432748, 0.16511334726, 2.73106407525, 0.160023203457, 2.663276341345, 0.1574456288525, 2.639828659215, 0.1519032649955, 2.677290543375, 0.149866128728, 2.742588073875, 0.1317913000945, 2.83091119718, 0.1270373095045, 2.90167131849, 0.114653268871, 2.985042279635, 0.1075427489915, 3.073223282775, 0.1006015075875, 3.17706020577, 0.1035688495495, 3.32737586599, 0.1015826434015, 3.42912181883, "#", 3.475340022545, 0.103118557226, 3.486419663055, 0.1193589296055, "#", 0.13851713401, 3.457046645145, 0.1631991379335, 3.44631947826, 0.191925444301, 3.45858812872, 0.201983057231, "#", 0.202896100671, "#", 0.191415438258, 3.985199599215, 0.1648094059945, 4.321846272165, "#", 4.571987422815, 0.0944045646035, 4.496085327115, 0.134366978354, 4.524862831775, 0.1384872096215, 4.654987913635, 0.1114781158525, 4.72253408098, 0.1064015487755, 4.81591878463, 0.0907594662355, 4.93853110336, 0.082841613704, 5.06075444245, 0.0778504290065, 5.1728057693, "#", 5.34968108975, 0.1047312534825], "minLowerBound": -9999, "maxUpperBound": 9999}, "outcome": "residential_area\n"}')